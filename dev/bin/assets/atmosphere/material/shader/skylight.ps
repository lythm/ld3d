#version 330

#pragma include "../../../standard/material/shader/dr_gbuffer.glsl"
#pragma include "../../../standard/material/shader/dr_light.glsl"
#pragma include "../../../standard/material/shader/matrix_block.glsl"

uniform sampler2D _DR_G_BUFFER_1;
uniform sampler2D _DR_G_BUFFER_0;

layout(row_major) uniform;

layout(std140) uniform light
{
	vec3	dir;
	float	intensity;
	vec3	clr;
};

uniform sampler2D shadow_map;

uniform mat4 light_tm;

out vec4 f_color;

void main_no_shadow()
{
	vec2 dim = textureSize(_DR_G_BUFFER_1, 0);

	vec2 uv = gl_FragCoord.xy / dim;

	float depth = dr_gbuffer_get_depth(_DR_G_BUFFER_0, uv);

	vec4 vpos = vec4(view_port_2_view_space(gl_FragCoord.xy, depth, MATRIX_PROJ, dim), 1);

	vec3 n = dr_gbuffer_get_normal(_DR_G_BUFFER_1, uv);

	DirectionalLight l;
	
	l.dir = dir;
	
	l.intensity = intensity;
	l.clr = clr;

	LightResult ret = dr_light_dir(n, l, MATRIX_WV);
	
	f_color.xyz = ret.diffuse;
	f_color.w = rgb_2_il(ret.specular);

}

float Soft(sampler2D shadow, vec3 uvc, float scale)
{
	float s = 0;	
	float e = -0.00007;

	for(float x = -1.5; x <= 1.5; x += 1.0)
	{
		for(float y = -1.5; y <= 1.5; y += 1.0)
		{
			vec2 offset;
			offset.x = x * scale;
			offset.y = y * scale;

			float z = texture(shadow, uvc.xy + offset).x;
			s += z < (uvc.z + e) ? 0 : 1.0;
		}
	}

	s /= 16;
	
	return s;
}

void main_with_shadow()
{
	vec2 dim = textureSize(_DR_G_BUFFER_1, 0);

	vec2 uv = gl_FragCoord.xy / dim;

	float depth = dr_gbuffer_get_depth(_DR_G_BUFFER_0, uv);

	vec4 vpos = vec4(view_port_2_view_space(gl_FragCoord.xy, depth, MATRIX_PROJ, dim), 1);

	vpos = vpos * MATRIX_I_VIEW * light_tm;

	vpos.x = vpos.x / vpos.w * 0.5 + 0.5;
	vpos.y = vpos.y / vpos.w * 0.5 + 0.5;
	vpos.z = vpos.z / vpos.w * 0.5 + 0.5;


	ivec2 size = textureSize(shadow_map, 0);
	
	ivec2 center;
	center.x = int(vpos.x * size.x);
	center.y = int(vpos.y * size.y);


	float s = Soft(shadow_map, vpos.xyz, 1.0 / size.x);

	vec3 n = dr_gbuffer_get_normal(_DR_G_BUFFER_1, uv);

	DirectionalLight l;
	
	l.dir = dir;
	
	l.intensity = intensity;
	l.clr = clr;

	LightResult ret = dr_light_dir(n, l, MATRIX_WV);
	
	f_color.xyz = ret.diffuse * s;
	f_color.w = rgb_2_il(ret.specular) * s;
}
