#version 330

#pragma include "dr_gbuffer.glsl"
#pragma include "dr_light.glsl"
#pragma include "matrix_block.glsl"

uniform sampler2DMS _DR_G_BUFFER_0;
uniform sampler2DMS _DR_G_BUFFER_1;
uniform sampler2DMS _DR_G_BUFFER_2;


layout(std140) uniform light
{
	vec3	clr;
	float	intensity;
	float	radius;
};


out vec4 color;

void main()
{
	vec2 dim = textureSize(_DR_G_BUFFER_0);
	
	ivec2 uv = ivec2(gl_FragCoord.xy);

	PointLight pl;
	
	pl.clr = clr;
	pl.intensity = intensity;
	pl.radius = radius;


	vec3 diff = vec3(0, 0, 0);
	vec3 spec = vec3(0, 0, 0);

	for(int i = 0; i < 4; ++i)
	{

		vec3 n = dr_gbuffer_get_normal(_DR_G_BUFFER_1, uv, i);

		float depth = dr_gbuffer_get_depth(_DR_G_BUFFER_0, uv, i);

		vec3 vpos = view_port_2_view_space(gl_FragCoord.xy, depth, MATRIX_PROJ, dim);

		LightResult tmp = dr_light_point(vpos, n, pl, MATRIX_WV);
		
		diff += tmp.diffuse;
		spec += tmp.specular;
	}

	diff /= 4.0;
	spec /= 4.0;

	color.xyz = diff;
	color.w = rgb_2_il(spec);
}
