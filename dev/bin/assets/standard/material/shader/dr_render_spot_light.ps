#version 330

#pragma include "matrix_block.glsl"
#pragma include "dr_gbuffer.glsl"
#pragma include "dr_light.glsl"

uniform sampler2D _DR_G_BUFFER_0;
uniform sampler2D _DR_G_BUFFER_1;
uniform sampler2D _DR_G_BUFFER_2;


uniform sampler2D tex;

layout(row_major) uniform;

uniform mat4	light_matrix;	

layout(std140) uniform light
{
	vec3	clr;
	float	intensity;
	float	range;
	float	cos_theta;
};

out vec4 color;

vec3 proj_texture(vec3 vpos)
{
	vec4 p = vec4(vpos, 1) * MATRIX_I_VIEW * light_matrix;
	
	vec2 uv = p.xy / p.w;

	uv = uv + vec2(1, 1);
	uv = uv / 2;
	
	uv.y = 1 - uv.y;

	return texture2D(tex, uv).xyz;
}

void main()
{
	vec2 dim = textureSize(_DR_G_BUFFER_0, 0);
	vec2 uv = gl_FragCoord.xy / dim;
	vec3 n = dr_gbuffer_get_normal(_DR_G_BUFFER_1, uv);
	float depth = dr_gbuffer_get_depth(_DR_G_BUFFER_0, uv);
	vec3 vpos = view_port_2_view_space(gl_FragCoord.xy, depth, MATRIX_PROJ, dim);

	SpotLight sl;
	sl.clr = clr;
	sl.intensity = intensity;
	sl.range = range;
	sl.cos_theta = cos_theta;

	LightResult ret = dr_light_spot(vpos, n, sl, MATRIX_WV);

	color.xyz = ret.diffuse * proj_texture(vpos);
	color.w = rgb_2_il(ret.specular);
}
